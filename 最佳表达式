#include<iostream>
#include<cstdio>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
using namespace std;
string num[100][100],dp[100][100];
int cmp(string &num1,string &num2)
{
    int l1 = num1.length();
    int l2 = num2.length();
    if (l1 != l2)
    {
        return l1-l2;
    }
    else
    {
        for (int i=l1-1; i>=0; i--)
        {
            if (num1[i]!=num2[i])
            {
                return num1[i]-num2[i];
            }
        }
        return 0;
    }
}
void add (string &num1,string &num2,string &num3)
{
    int l1 = num1.length();
    int l2 = num2.length();
    int maxl = 60,c = 0;
    for (int i=0; i<maxl; i++)
    {
        int t;
        if (i < l1 && i < l2)
            t = num1[i]+num2[i]-2*'0'+c;
        else if (i < l1 && i >= l2)
            t = num1[i] - '0' + c;
        else if (i >= l1 && i < l2)
            t = num2[i] - '0' + c;
        else
            break;
        num3.append(1,t%10+'0');
        c = t/10;
    }
    while (c)
    {
        num3.append(1,c%10+'0');
        c /= 10;
    }
}
int main()
{
    int m;
    string a;
    while(cin>>m>>a)
    {
        reverse(a.begin(),a.end());
        int n=a.length();
        for(int i=1; i<=n; i++)
            for(int j=i; j<=n; j++)
                num[i][j]=a.substr(i-1,j-i+1);//num[i][j]表示 从第i位到第j位的子串，长度为j-i+1

        for(int i=1; i<=n; i++)
            dp[0][i]=num[1][i];
        for(int i=1; i<=m; i++)         //i表示加号个数
            for(int j=1; j<=n; j++)     //j表示子串长度
            {
                string minstr="9999999999999999999999999999";
                string temstr;
                for(int k=i; k<=j-1; k++)
                {
                    temstr.clear();
                    add(dp[i-1][k],num[k+1][j],temstr);
                    if(cmp(minstr,temstr)>0)
                        minstr=temstr;
                }
                dp[i][j]=minstr;
            }
        reverse(dp[m][n].begin(),dp[m][n].end());
        cout<<dp[m][n]<<endl;
    }
    return 0;
}
